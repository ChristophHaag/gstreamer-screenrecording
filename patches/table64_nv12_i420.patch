From 0f4499a60a4868f84f3250b86e311e18c1d91a65 Mon Sep 17 00:00:00 2001
From: Mozzhuhin Andrey <nopscmn@gmail.com>
Date: Wed, 25 Jun 2014 13:01:52 -0400
Subject: [PATCH] Optimize videoconvert_convert_matrix8

---
 gst/videoconvert/videoconvert.c | 55 ++++++++++++++++++++++++++++-------------
 gst/videoconvert/videoconvert.h |  5 ++++
 2 files changed, 43 insertions(+), 17 deletions(-)

diff --git a/gst/videoconvert/videoconvert.c b/gst/videoconvert/videoconvert.c
index 380822d..ec29cd9 100644
--- a/gst/videoconvert/videoconvert.c
+++ b/gst/videoconvert/videoconvert.c
@@ -44,7 +44,7 @@ static void videoconvert_dither_verterr (VideoConvert * convert,
     guint16 * pixels, int j);
 static void videoconvert_dither_halftone (VideoConvert * convert,
     guint16 * pixels, int j);
-
+static void videoconvert_convert_init_tables (VideoConvert * convert);
 
 VideoConvert *
 videoconvert_convert_new (GstVideoInfo * in_info, GstVideoInfo * out_info)
@@ -133,26 +133,22 @@ videoconvert_convert_convert (VideoConvert * convert,
 static void
 videoconvert_convert_matrix8 (VideoConvert * convert, gpointer pixels)
 {
-  int i;
-  int r, g, b;
-  int y, u, v;
+  int t;
+  guint8 r, g, b;
+  gint64 c = convert->t_c;
   guint8 *p = pixels;
+  gint64 x;
 
-  for (i = 0; i < convert->width; i++) {
-    r = p[i * 4 + 1];
-    g = p[i * 4 + 2];
-    b = p[i * 4 + 3];
+  for (t = 0; t < convert->width * 4; t += 4) {
+    r = p[t + 1];
+    g = p[t + 2];
+    b = p[t + 3];
 
-    y = (convert->cmatrix[0][0] * r + convert->cmatrix[0][1] * g +
-        convert->cmatrix[0][2] * b + convert->cmatrix[0][3]) >> SCALE;
-    u = (convert->cmatrix[1][0] * r + convert->cmatrix[1][1] * g +
-        convert->cmatrix[1][2] * b + convert->cmatrix[1][3]) >> SCALE;
-    v = (convert->cmatrix[2][0] * r + convert->cmatrix[2][1] * g +
-        convert->cmatrix[2][2] * b + convert->cmatrix[2][3]) >> SCALE;
+    x = convert->t_r[r] + convert->t_g[g] + convert->t_b[b] + c;
 
-    p[i * 4 + 1] = CLAMP (y, 0, 255);
-    p[i * 4 + 2] = CLAMP (u, 0, 255);
-    p[i * 4 + 3] = CLAMP (v, 0, 255);
+    p[t + 1] = x >> (32 + SCALE);
+    p[t + 2] = x >> (16 + SCALE);
+    p[t + 3] = x >> (0 + SCALE);
   }
 }
 
@@ -314,6 +310,9 @@ videoconvert_convert_compute_matrix (VideoConvert * convert)
     for (j = 0; j < 4; j++)
       convert->cmatrix[i][j] = rint (dst.m[i][j]);
 
+  if (convert->in_bits != 16 && convert->out_bits != 16)
+    videoconvert_convert_init_tables (convert);
+
   GST_DEBUG ("[%6d %6d %6d %6d]", convert->cmatrix[0][0],
       convert->cmatrix[0][1], convert->cmatrix[0][2], convert->cmatrix[0][3]);
   GST_DEBUG ("[%6d %6d %6d %6d]", convert->cmatrix[1][0],
@@ -341,6 +340,28 @@ no_pack_func:
 }
 
 static void
+videoconvert_convert_init_tables (VideoConvert * convert)
+{
+  int i, j;
+
+  for (i = 0; i <= 255; i++) {
+    gint64 r = 0, g = 0, b = 0;
+    for (j = 0; j <= 2; j++) {
+      r = (r << 16) + convert->cmatrix[j][0] * i;
+      g = (g << 16) + convert->cmatrix[j][1] * i;
+      b = (b << 16) + convert->cmatrix[j][2] * i;
+    }
+    convert->t_r[i] = r;
+    convert->t_g[i] = g;
+    convert->t_b[i] = b;
+  }
+
+  convert->t_c = ((gint64) convert->cmatrix[0][3] << 32)
+      + ((gint64) convert->cmatrix[1][3] << 16)
+      + ((gint64) convert->cmatrix[2][3] << 0);
+}
+
+static void
 videoconvert_dither_verterr (VideoConvert * convert, guint16 * pixels, int j)
 {
   int i;
diff --git a/gst/videoconvert/videoconvert.h b/gst/videoconvert/videoconvert.h
index bc0aa7a..fddb2f6 100644
--- a/gst/videoconvert/videoconvert.h
+++ b/gst/videoconvert/videoconvert.h
@@ -44,6 +44,11 @@ struct _VideoConvert {
   gint out_bits;
   gint cmatrix[4][4];
 
+  gint64 t_r[256];
+  gint64 t_g[256];
+  gint64 t_b[256];
+  gint64 t_c;
+
   ColorSpaceDitherMethod dither;
 
   guint lines;
-- 
1.9.1 
