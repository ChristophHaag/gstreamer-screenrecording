diff --git a/gst/videoconvert/videoconvert.c b/gst/videoconvert/videoconvert.c
index 380822d..cb5f435 100644
--- a/gst/videoconvert/videoconvert.c
+++ b/gst/videoconvert/videoconvert.c
@@ -29,7 +29,9 @@
 #include <math.h>
 
 #include "gstvideoconvertorc.h"
-
+#include <xmmintrin.h>
+#include <emmintrin.h>
+#include <tmmintrin.h>
 
 static void videoconvert_convert_generic (VideoConvert * convert,
     GstVideoFrame * dest, const GstVideoFrame * src);
@@ -133,27 +135,97 @@ videoconvert_convert_convert (VideoConvert * convert,
 static void
 videoconvert_convert_matrix8 (VideoConvert * convert, gpointer pixels)
 {
-  int i;
-  int r, g, b;
-  int y, u, v;
-  guint8 *p = pixels;
-
-  for (i = 0; i < convert->width; i++) {
-    r = p[i * 4 + 1];
-    g = p[i * 4 + 2];
-    b = p[i * 4 + 3];
-
-    y = (convert->cmatrix[0][0] * r + convert->cmatrix[0][1] * g +
-        convert->cmatrix[0][2] * b + convert->cmatrix[0][3]) >> SCALE;
-    u = (convert->cmatrix[1][0] * r + convert->cmatrix[1][1] * g +
-        convert->cmatrix[1][2] * b + convert->cmatrix[1][3]) >> SCALE;
-    v = (convert->cmatrix[2][0] * r + convert->cmatrix[2][1] * g +
-        convert->cmatrix[2][2] * b + convert->cmatrix[2][3]) >> SCALE;
-
-    p[i * 4 + 1] = CLAMP (y, 0, 255);
-    p[i * 4 + 2] = CLAMP (u, 0, 255);
-    p[i * 4 + 3] = CLAMP (v, 0, 255);
-  }
+        int i,j;
+        guint8 *p = pixels;
+ 
+        __m128i v_byte1 = _mm_set1_epi32(0x000000ff);
+        __m128i v_byte3 = _mm_set1_epi32(0x00ff0000);
+        __m128i v_mat_00 = _mm_set1_epi16((short int)convert->cmatrix[0][0]);
+        __m128i v_mat_01 = _mm_set1_epi16((short int)convert->cmatrix[0][1]);
+        __m128i v_mat_02 = _mm_set1_epi16((short int)convert->cmatrix[0][2]);
+        __m128i v_mat_03 = _mm_set1_epi16((short int)convert->cmatrix[0][3]);
+        __m128i v_mat_04 = _mm_set1_epi16((short int)convert->cmatrix[1][0]);
+        __m128i v_mat_05 = _mm_set1_epi16((short int)convert->cmatrix[1][1]);
+        __m128i v_mat_06 = _mm_set1_epi16((short int)convert->cmatrix[1][2]);
+        __m128i v_mat_07 = _mm_set1_epi16((short int)convert->cmatrix[1][3]);
+        __m128i v_mat_08 = _mm_set1_epi16((short int)convert->cmatrix[2][0]);
+        __m128i v_mat_09 = _mm_set1_epi16((short int)convert->cmatrix[2][1]);
+        __m128i v_mat_10 = _mm_set1_epi16((short int)convert->cmatrix[2][2]);
+        __m128i v_mat_11 = _mm_set1_epi16((short int)convert->cmatrix[2][3]);
+        
+        __m128i mask2   = _mm_set1_epi32(0x00ff00ff);
+ 
+        __m128i mask_y1 = _mm_set_epi8((char)128, (char)128, 12, (char)128,   (char)128, (char)128, 8, (char)128,
+                                        (char)128, (char)128, 4, (char)128,   (char)128, (char)128, 0, (char)128);
+ 
+        __m128i mask_y2 = _mm_set_epi8((char)128, (char)128, 14,  (char)128,  (char)128, (char)128, 10, (char)128,
+                                        (char)128, (char)128, 6, (char)128,   (char)128, (char)128, 2, (char)128);
+ 
+        __m128i mask_u1 = _mm_set_epi8((char)128, 12, (char)128, (char)128,   (char)128, 8, (char)128, (char)128,
+                                        (char)128, 4, (char)128, (char)128,   (char)128, 0, (char)128, (char)128);
+ 
+        __m128i mask_u2 = _mm_set_epi8((char)128, 14, (char)128, (char)128,   (char)128, 10, (char)128, (char)128,
+                                        (char)128, 6, (char)128, (char)128,   (char)128, 2, (char)128, (char)128);
+ 
+        __m128i mask_v1 = _mm_set_epi8(12, (char)128, (char)128, (char)128,   8, (char)128, (char)128, (char)128,
+                                        4, (char)128, (char)128, (char)128,   0, (char)128, (char)128, (char)128);
+ 
+        __m128i mask_v2 = _mm_set_epi8(14, (char)128, (char)128, (char)128,   10, (char)128, (char)128, (char)128,
+                                        6, (char)128, (char)128, (char)128,   2, (char)128, (char)128, (char)128);
+ 
+        
+        for (i=0; i<convert->width / 8; i++) {
+                __m128i a1, a2, r, g, b, y, u, v, res;
+ 
+                a1 = _mm_loadu_si128((__m128i *)&p[i*32]);
+                a2 = _mm_loadu_si128((__m128i *)&p[i*32 + 16]);
+ 
+                r = _mm_or_si128(_mm_and_si128(_mm_srli_si128(a1, 1), v_byte1), _mm_and_si128(_mm_slli_si128(a2, 1), v_byte3));
+                g = _mm_or_si128(_mm_and_si128(_mm_srli_si128(a1, 2), v_byte1), _mm_and_si128(a2, v_byte3));
+                b = _mm_or_si128(_mm_and_si128(_mm_srli_si128(a1, 3), v_byte1), _mm_and_si128(_mm_srli_si128(a2, 1), v_byte3));
+ 
+ 
+                y = _mm_add_epi16(
+                        _mm_add_epi16(
+                                _mm_mullo_epi16(r, v_mat_00),
+                                _mm_mullo_epi16(g, v_mat_01)),
+                        _mm_add_epi16(
+                                _mm_mullo_epi16(b, v_mat_02),
+                                v_mat_03));
+ 
+                y = _mm_and_si128(_mm_srai_epi16(y, 8), mask2);
+ 
+                u = _mm_add_epi16(
+                        _mm_add_epi16(
+                                _mm_mullo_epi16(r, v_mat_04),
+                                _mm_mullo_epi16(g, v_mat_05)),
+                        _mm_add_epi16(
+                                _mm_mullo_epi16(b, v_mat_06),
+                                v_mat_07));
+ 
+                u  = _mm_and_si128(_mm_srai_epi16(u, 8), mask2);
+ 
+                v = _mm_add_epi16(
+                        _mm_add_epi16(
+                                _mm_mullo_epi16(r, v_mat_08),
+                                _mm_mullo_epi16(g, v_mat_09)),
+                        _mm_add_epi16(
+                                _mm_mullo_epi16(b, v_mat_10),
+                                v_mat_11));
+ 
+                v = _mm_and_si128(_mm_srai_epi16(v, 8), mask2);
+ 
+ 
+                res = _mm_or_si128(_mm_shuffle_epi8(y, mask_y1), _mm_shuffle_epi8(u, mask_u1));
+                res = _mm_or_si128(res, _mm_shuffle_epi8(v, mask_v1));
+ 
+                _mm_storeu_si128((__m128i *)&p[i*32], res);
+ 
+                res = _mm_or_si128(_mm_shuffle_epi8(y, mask_y2), _mm_shuffle_epi8(u, mask_u2));
+               res = _mm_or_si128(res, _mm_shuffle_epi8(v, mask_v2));
+ 
+                _mm_storeu_si128((__m128i *)&p[i*32 + 16], res);
+        }
 }
 
 static void
